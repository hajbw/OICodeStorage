algorithm tarjan is
	input: graph G = (V, E)
	output: set of strongly connected components (sets of vertices)

	index = 0
	S = []
	for each v in V :
		if (v.index is undefined) :
			strongconnect(v)

	def strongconnect(u):
		# Set the depth index for u to the smallest unused index
		u.index = index
		u.lowlink = index
		index = index + 1
		S.push(u)
		u.onStack = True

		# Consider successors of u
		for each (u, v) in E :
			if v.index is undefined :
				# Successor v has not yet been visited; recurse on it
				strongconnect(v)
				u.lowlink  = min(u.lowlink, v.lowlink)
			else if (u.onStack) :
				# Successor u is in stack S and hence in the current SCC
				# If u is not on stack, : (u, v) is a cross-edge in the DFS tree and must be ignored
				# Note: The next line may look odd - but is correct.
				# It says u.index not u.lowlink; that is deliberate and from the original paper
				u.lowlink  = min(u.lowlink, v.index)

		# If u is a root node, pop the stack and generate an SCC
		if u.lowlink == u.index :
			start a new strongly connected component
			repeat
				v = S.pop()
				v.onStack = False
				add v to current strongly connected component
			while v != u
			output the current strongly connected component

