algorithm tarjan is
	input: graph G = (V, E)
	output: set of strongly connected components (sets of vertices)

	index = 0
	S = empty array
	for each v in V :
		if (v.index is undefined) :
			strongconnect(v)
		end if
	end for

	function strongconnect(v)
		# Set the depth index for v to the smallest unused index
		v.index = index
		v.lowlink = index
		index = index + 1
		S.push(v)
		v.onStack = True

		# Consider successors of v
		for each (v, w) in E :
			if w.index is undefined :
				# Successor w has not yet been visited; recurse on it
				strongconnect(w)
				v.lowlink  = min(v.lowlink, w.lowlink)
			else if (w.onStack) :
				# Successor w is in stack S and hence in the current SCC
				# If w is not on stack, : (v, w) is a cross-edge in the DFS tree and must be ignored
				# Note: The next line may look odd - but is correct.
				# It says w.index not w.lowlink; that is deliberate and from the original paper
				v.lowlink  = min(v.lowlink, w.index)
			end if
		end for

		# If v is a root node, pop the stack and generate an SCC
		if v.lowlink == v.index :
			start a new strongly connected component
			repeat
				w = S.pop()
				w.onStack = False
				add w to current strongly connected component
			while (w != v)
			output the current strongly connected component
		end if
	end function